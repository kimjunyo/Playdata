정수: byte(1) short(2) int(4) long(8)
실수: float(4) double(8)
논리: boolean
문자(유니코드): char(2)
char a=45;
int t=a;

참조(클래스) 데이터 타입
문자열: Stirng

데이터 타입 변환(형 변환)
up	: byte a=10;	short b=20;	=> b=a;
down	: a=b;
     * MemberClass m1=new MemberClass();
     * Object m2=new MemberClass();
     * MemberClass m3=(MemberClass) m2;

명시적: 앞에 데이터 타입 ()로 붙이기
암묵적

조건문: if(비교조건문) {} /if(비교조건문){} else{}
   비교: == != > < >=> =
   논리: AND(&) OR(|) NOT(!)

반복문: for( ; ; ){
         
          }
          for(변수 선언; 조건; 증감){

          }
검색(조회): 그리고, ~이고(&)
	  또는 (|)
          for(변수 선언; 조건; 증감){
	if(){
	  break;
	}
          }
배열: 한번에 다중값을 저장할 경우...
       한번 정해진 길이는 변경 불가능!!
    선언: 데이터타입[] 배열명=new 데이터타입[배열의 길이];
           데이터타입[] 배열명={데이터, 데이터, 데이터};

사용: 배열은 데이터의 위치를 지정하는 index번호가 존재
       index번호는 항상 0부터 1씩 증가하면서 자동 생성!
       따라서 index번호는 소숫점이 있을 수 없지요.
배열에 데이터를 설정(대입)하는 경우
배열명[index번호] = 데이터

배열으로부터 데이터를 추출하는 경우
저장할 변수 = 배열명[index번호];

주의 사항!!
배열의 index 를 벗어나면 JVM 통해 실행 시(컴파일), indexoutofbounds 발생(코드상 오류 없음)

문자열 다루기: String.class
자바에서 제공해주는 클래스
String s1=new String("문자열");
String s2="문자열";

문자열 비교: s1.equals("비교할 문자열");
String s1=new String("abcd");
String input="abcd";
s1==input ===> false(String으로 감싸져있어서)
s1.equals("abcd") ===> true(String을 벗겨버림-문자열 비교)

문자열 분리: String.split("구분자")
String text="<html><head></head><body></body></html>";
String[] split=text.split("<body>");
split[0] <==="<html><head></head>";
split[1] <==="</body></html>";

String text="문, 자, 열,  분, 리";
String[] split=text1.split(" ");
split[0] <=== "문,"
split[1] <=== "자,"
split[2] <=== "열,"
split[3] <=== "분,"
split[4] <=== "리"
String[] split=text1.split("  ");
split[0] <=== "문, 자, 열,"
split[1] <=== "분, 리"

문자열 추출: String.substring()
1. 지정 위치부터 마지막까지: String.substring(startIndex)
2. 지정 위치부터 지정 위치까지: Stirng.substring(startIndex, endIndex)
* String 에 저장되는 문자열은 내부에 index번호가 배열처럼 자동 부여됨
	    0 1  2  34 5 6 7 
String text="문자열의 일부분";
String end=text.substring(5); //"일부분"
String between=text.subtstring(2,4); //"열의"
-------------------------------------------------------------------------------------------------
클래스의 종류
1. main()을 포함하는 클래스:
  하나의 프로젝트에 단 하나만 존재해야 한다.
  => 이유: 프로젝트의 초기 진입점이기 때문!!!!
2. 일반 클래스: main()을 포함하는 클래스의 일을 분리 시키고자 사용.
  구성요소: 
  1. 클래스 선언부
  2. 변수(클래스 영역 변수)
  3. 생성자: 클래스를 new 연산자로 객체화 시킬 때, 자동 호출되는 메서드.
  4. 메서드: 클래스 내 또는 다른 클래스에서 호출하여 사용되는 메서드.

3. interface 클래스: 객체의 유연성(데이터 타입)을 부여하기 위해 사용
  특징: 선언 시 'class' 키워드 대신 'interface'를 이용하여 선언
  구성요소: 
  1. interface 선언부(class 쓰면 안됨)
  2. 상수: 한번 설정한 값을 변경하지 못하도록 선언된 변수
  3. 추상메서드
*생성자, 변수 못 씀(상수로 바뀜), 메서드 X(추상메서드로 바뀜)

4. 추상 클래스: 일반 클래스와 interface의 기능을 묶어 놓은 클래스
  특징: 'class' 키워드 앞에 추상을 뜻하는 'abstract'를 부여!!!
  구성요소
  1. abstract class 키워드를 이용하여 클래스 선언
  2. 변수(클래스변수)
  3. 생성자: new 객체 생성 불가능!!!/ 상속에서 사용됨!!
  4. 메서드
  5. 추상클래스
=======================================================
클래스 파일을 이용한 객체 생성: new를 이용하여 생성
* 클래스 파일은 반드시 객체화가 되어야만 클래스 본연의 기능을 사용할 수 있다!

객체 생성 순서
MemberClass m1=new MemberClass();

1. new MemberClass(); 에서 객체 생성이 완료되어야 함!!
1-1. MemberClass와 동일한 이름을 가진 클래스 파일이 존재하는지를 검색.
1-2. 존재하면
      MemberClass 내부에 선언할 수 있는 것은 모두 선언!
1-3. 선언 완료 후,
      MemberClass 내부에 MemberClass() 생성자를 호출하여
1-4 new MemberClass()
      new 연산자를 이용하여 객체 생성 완료

2. MemberClass m1=new MemberClass();
2-1. 생성 완료된 객체를 동일 형태의 구조를 갖는 m1 에 대입(할당)

----------------------------------------------------------------
자바에서 생성되는 모든 클래스는 내부적으로 java.lang.Object.class를 이용(상속)하여 선언됨!!
따라서 모든 클래스의 객체는 Object 타입으로 저장가능!

단, 클래스 내부에서 선언된 변수, 메서드들은 사용 불가능!!
Object 타입으로 저장받은 객체의 변수, 메서드들을 사용하려면
반드시 원래 타입으로 형변환 해주어야 한다!!!