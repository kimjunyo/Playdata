조상 class는 자식 클래스 내부 변수나 method 사용 불가능

객체는 따로따로 인식, 변수, method가 다 다름
static이 붙으면 class를 따라다님(즉, 변수가 바뀌면 모든 class의 변수가 바뀜)
static 변수는 주의해서 써야 함(static 붙으면 공유 변수라 다바뀜)

final이 붙은 변수는 한번 값을 설정하면 더이상 수정 불가능
		상수 만들 때 사용

MVC: Model, view, controller 중요!

web: internet, ip: 24시간 풀가동
기계(server)={MySQL(DB server), tomcat(webService),storage}

1. 전체 구조(각 클래스의 역할을 어떻게 나눌 것인지)
2. 메서드 기본
3. 정보 클래스(MemberClass)
4. 전체 데이터 저장(DataClass)
5. MainClass 각 데이터가 제대로 들어갔는지 확인 (각 Method가 호출되는지 확인)

형상관리) 매일 작업하는 프로젝트를 날짜별로 export하여 프로젝트가 꼬여도 되돌릴 수 있음(version관리)
=========================================================
MainClass DataClass MemberClass MethodClass PrintClass
static main(){
	DataClass dc=new DataClass();
}
DataClass{
	MemberClass[] members=new MemberClass[6];
	
	DataClass(){
		this.init();
	}
	
	init(){member[0]=new MemberClass(~);};
}
1. JVM이 MainClass.main을 호출함. 
2. DataClass class 찾으러감
3. DataClass 찾음 3-1. 변수 선언 3-2. 생성자 선언 3-3. init 매서드 선언
4. DataClass() 생성자 호출
5. init() 매서드 호출 5-1. MemberClass 찾으러감
6. MemberClass 찾음 6-1 변수 선언 6-2 생성자 선언
7. MemberClass(~) 생성자 호출
==================================================================
1. 교수 나이 구하기 MethodClass

DataClass
MemberClass[] members=new MemberClass[6];

MainClass: main()
1. DataClass dc=new DataClass();
2. dc.members[]
3. MethodClass.age(dc.members); -6번에서 여기로 이동
7. int[] ages=MethodClass.age(dc.members);
8. PrintClass.prn(ages);
MethodClass: int[] age(4.MemberClass[] members){};
5. int[] ages=new int[members.length];
6. return ages;
PrintClass: void prn(9.int[] ages){};
